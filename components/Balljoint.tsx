/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef } from 'react'
import * as THREE from 'three'
import { useFrame } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    PlaneEmissive: THREE.Mesh
    Ball_Joint_Ball: THREE.Mesh
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
    Material: THREE.MeshBasicMaterial
  }
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/balljoint.glb') as GLTFResult

  const groupRef = useRef<THREE.Group>(null)

  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y -= 0.002
    }
  })
  return (
    <group {...props} dispose={null} ref={groupRef}>
      <mesh
        geometry={nodes.PlaneEmissive.geometry}
        material={materials['Material.001']}
      />
      <mesh
        geometry={nodes.Ball_Joint_Ball.geometry}
        material={materials.Material}
        position={[-0.16, 0.18, -0.06]}
      />
    </group>
  )
}

useGLTF.preload('/balljoint.glb')

export default Model
